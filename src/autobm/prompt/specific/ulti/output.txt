```python
policy = {
   "proposer_strategy": "Pr(o|T) = ...", # Mathematical expression or pseudocode
   "parameters": [
      {"name": "param1", "description": ""},
      # ...other parameters
   ],
   "constants": [
      {"name": "constant1", "description": "", type: "int", value: 0},
      # ...other constants
   ],
   "intermediate_terms": [
      {
         "name": "term1",
         "description": "",
         "computation": , #Mathematical expression or pseudocode
      },
      # ...other intermediate terms
   ]
}
```
- Parameters: Prespecified quantities that define a model's structural assumptions and requiring explicit learning from data using gradient descending.
- Constants: SIMPLE fixed values that are NOT subject to learning or optimization, serving as reference points or prior assumptions or hyperparameters. If not neccessary, do not make float value as constants, leave them in parameters.
- Intermediate terms: Dynamically generated transient variables derived during computational processes, which serve as critical feature design elements for capturing system behaviors.

---

## **Core Constraints**

1. **Interpretability Constrains**: Ensure the model is fully interpretable.
   - [ ] STRICTLY Avoid neural networks or any black-box models.
   - [ ] STRICTLY Avoid using distributions that have weak interpretability such as Gaussian, Dirichlet, Beta, etc in any part of the model.
   - Consider game theory, behavior theory


2. **Formal Requirements**:
   - [ ] Make sure that there is NO undefined terms in the policy.
   - [ ] Each term should provide a clear mathematical expression or pseudocode that demonstrates how this term utilizes information in its computation.
   - [ ] Keep all computations in `policy={...}`. "proposer_strategy" contains brief computation using intermediate terms. "intermediate_terms" contains detailed computation.
   - [ ] Do not change the range of offer (always $o \in [0,1]$), which means to strictly prevent "min_offer" or "max_offer"  or similar constants showing up in the model.
   
3. Continuous probability distribution:
   - [ ] The output of the model should be a continuous probability distribution . Do not use discrete levels.
   - [ ] Ensure that the output is a valid probability distribution, i.e., it integrates to 1 over the range of $o$.
   - [ ] Use a normalization term $Z=\int_0^1 something do$ or a softmax normalization $Z=\int_0^1 e^{something}do$ to ensure the output is a valid probability distribution.
